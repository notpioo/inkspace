{"file_contents":{"app.py":{"content":"import json\nimport os\nimport base64\nfrom datetime import datetime\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify, Response\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom werkzeug.utils import secure_filename\nimport secrets\n\napp = Flask(__name__)\napp.secret_key = os.environ.get('SESSION_SECRET')\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)  # needed for url_for to generate with https\n\n@app.context_processor\ndef inject_user_data():\n    return {\n        'load_users': load_users\n    }\n\n# Database file paths\nUSERS_DB = 'data/users.json'\nNOTES_DB = 'data/notes.json'\n\ndef init_database():\n    \"\"\"Initialize JSON database files if they don't exist\"\"\"\n    os.makedirs('data', exist_ok=True)\n\n    if not os.path.exists(USERS_DB):\n        with open(USERS_DB, 'w') as f:\n            json.dump({}, f)\n\n    if not os.path.exists(NOTES_DB):\n        with open(NOTES_DB, 'w') as f:\n            json.dump({}, f)\n\ndef load_users():\n    \"\"\"Load users from JSON file\"\"\"\n    try:\n        with open(USERS_DB, 'r') as f:\n            return json.load(f)\n    except:\n        return {}\n\ndef save_users(users):\n    \"\"\"Save users to JSON file\"\"\"\n    with open(USERS_DB, 'w') as f:\n        json.dump(users, f, indent=2)\n\ndef load_notes():\n    \"\"\"Load notes from JSON file\"\"\"\n    try:\n        with open(NOTES_DB, 'r') as f:\n            return json.load(f)\n    except:\n        return {}\n\ndef save_notes(notes):\n    \"\"\"Save notes to JSON file\"\"\"\n    with open(NOTES_DB, 'w') as f:\n        json.dump(notes, f, indent=2)\n\ndef caesar_cipher(text, shift, encrypt=True):\n    \"\"\"Caesar cipher encryption/decryption\"\"\"\n    if not encrypt:\n        shift = -shift\n\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n\ndef validate_password(password):\n    \"\"\"Validate password strength\"\"\"\n    if len(password) < 8:\n        return False, \"Password harus minimal 8 karakter\"\n\n    has_upper = any(c.isupper() for c in password)\n    has_lower = any(c.islower() for c in password)\n    has_digit = any(c.isdigit() for c in password)\n    has_special = any(c in \"!@#$%^&*()_+-=[]{}|;:,.<>?\" for c in password)\n\n    if not (has_upper and has_lower and has_digit and has_special):\n        return False, \"Password harus mengandung huruf besar, huruf kecil, angka, dan karakter khusus\"\n\n    return True, \"\"\n\n@app.route('/')\ndef index():\n    \"\"\"Home page - display public notes like social media\"\"\"\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n\n    # Check app lock\n    users = load_users()\n    user = users.get(session['user_id'])\n    if user and user.get('app_lock_enabled') and not session.get('app_unlocked'):\n        return redirect(url_for('app_lock'))\n\n    notes = load_notes()\n    all_public_notes = []\n\n    # Collect all public notes from all users\n    for author_id, user_notes in notes.items():\n        author = users.get(author_id, {})\n        author_name = author.get('name', 'Unknown User')\n        \n        for note in user_notes:\n            # Only show public notes (not locked)\n            if note.get('is_public', False) and not note.get('is_locked', True):\n                # Decrypt content for display\n                decrypted_note = note.copy()\n                if decrypted_note.get('encrypted'):\n                    decrypted_note['content'] = caesar_cipher(decrypted_note['content'], 3, encrypt=False)\n                \n                # Add author information\n                decrypted_note['author_id'] = author_id\n                decrypted_note['author_name'] = author_name\n                \n                # Initialize likes if not exists\n                if 'likes' not in decrypted_note:\n                    decrypted_note['likes'] = []\n                decrypted_note['like_count'] = len(decrypted_note['likes'])\n                \n                all_public_notes.append(decrypted_note)\n\n    # Sort by creation date (newest first)\n    all_public_notes.sort(key=lambda x: x.get('created_at', ''), reverse=True)\n\n    return render_template('home.html', notes=all_public_notes, user=user)\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"User login\"\"\"\n    if request.method == 'POST':\n        email = request.form['email']\n        password = request.form['password']\n\n        users = load_users()\n        for user_id, user in users.items():\n            if user['email'] == email and check_password_hash(user['password'], password):\n                session['user_id'] = user_id\n                session['app_unlocked'] = not user.get('app_lock_enabled', False)\n                return redirect(url_for('index'))\n\n        flash('Email atau password salah', 'error')\n\n    return render_template('login.html')\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"User registration\"\"\"\n    if request.method == 'POST':\n        name = request.form['name']\n        email = request.form['email']\n        password = request.form['password']\n        confirm_password = request.form['confirm_password']\n\n        # Validation\n        if not all([name, email, password, confirm_password]):\n            flash('Semua field harus diisi', 'error')\n            return render_template('register.html')\n\n        if password != confirm_password:\n            flash('Password dan konfirmasi password tidak cocok', 'error')\n            return render_template('register.html')\n\n        is_valid, message = validate_password(password)\n        if not is_valid:\n            flash(message, 'error')\n            return render_template('register.html')\n\n        users = load_users()\n\n        # Check if email already exists\n        for user in users.values():\n            if user['email'] == email:\n                flash('Email sudah terdaftar', 'error')\n                return render_template('register.html')\n\n        # Create new user\n        user_id = str(len(users) + 1)\n        users[user_id] = {\n            'name': name,\n            'email': email,\n            'password': generate_password_hash(password),\n            'app_lock_enabled': False,\n            'app_lock_pin': '',\n            'created_at': datetime.now().isoformat()\n        }\n\n        save_users(users)\n        flash('Registrasi berhasil! Silakan login.', 'success')\n        return redirect(url_for('login'))\n\n    return render_template('register.html')\n\n@app.route('/logout')\ndef logout():\n    \"\"\"User logout\"\"\"\n    session.clear()\n    return redirect(url_for('login'))\n\n@app.route('/note', methods=['GET', 'POST'])\ndef note():\n    \"\"\"Create new note\"\"\"\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n\n    # Check app lock\n    users = load_users()\n    user = users.get(session['user_id'])\n    if user and user.get('app_lock_enabled') and not session.get('app_unlocked'):\n        return redirect(url_for('app_lock'))\n\n    if request.method == 'POST':\n        title = request.form['title']\n        content = request.form['content']\n        is_locked = 'is_locked' in request.form\n        is_public = 'is_public' in request.form\n\n        if not title or not content:\n            flash('Judul dan isi catatan harus diisi', 'error')\n            return render_template('note.html', user=user)\n\n        # Handle PIN for locked notes\n        note_pin = None\n        if is_locked:\n            pin_option = request.form.get('pin_option', 'app_pin')\n\n            if pin_option == 'custom_pin':\n                note_pin = request.form.get('note_pin', '')\n                if len(note_pin) != 4 or not note_pin.isdigit():\n                    flash('PIN catatan harus 4 digit angka', 'error')\n                    return render_template('note.html', user=user)\n                note_pin = generate_password_hash(note_pin)\n            elif pin_option == 'app_pin':\n                if not user or not user.get('app_lock_pin'):\n                    flash('Anda belum mengatur PIN App Lock. Silakan atur di Profile atau pilih PIN khusus.', 'error')\n                    return render_template('note.html', user=user)\n                note_pin = 'use_app_pin'  # Special marker to use app PIN\n\n        notes = load_notes()\n        if session['user_id'] not in notes:\n            notes[session['user_id']] = []\n\n        # Encrypt content with Caesar cipher\n        encrypted_content = caesar_cipher(content, 3, encrypt=True)\n\n        new_note = {\n            'id': len(notes[session['user_id']]) + 1,\n            'title': title,\n            'content': encrypted_content,\n            'encrypted': True,\n            'is_locked': is_locked,\n            'note_pin': note_pin,\n            'created_at': datetime.now().isoformat(),\n            'is_public': is_public # Add public flag\n        }\n\n        notes[session['user_id']].append(new_note)\n        save_notes(notes)\n\n        flash('Catatan berhasil disimpan!', 'success')\n        return redirect(url_for('index'))\n\n    return render_template('note.html', user=user)\n\n@app.route('/profile', methods=['GET', 'POST'])\ndef profile():\n    \"\"\"User profile and settings\"\"\"\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n\n    # Check app lock\n    users = load_users()\n    user = users.get(session['user_id'])\n    if user and user.get('app_lock_enabled') and not session.get('app_unlocked'):\n        return redirect(url_for('app_lock'))\n\n    if request.method == 'POST' and user:\n        action = request.form.get('action')\n\n        if action == 'edit_profile':\n            # Update profile information\n            profile_name = request.form.get('profile_name', '').strip()\n            profile_bio = request.form.get('profile_bio', '').strip()\n            \n            if profile_name:\n                user['name'] = profile_name\n            if profile_bio:\n                user['bio'] = profile_bio\n            \n            save_users(users)\n            flash('Profile berhasil diperbarui', 'success')\n\n        elif action == 'upload_photo':\n            # Handle profile photo upload\n            if 'profile_photo' not in request.files:\n                flash('No file selected', 'error')\n                # Quick stats calculation for error return\n                notes = load_notes()\n                user_notes = notes.get(session['user_id'], [])\n                public_notes_list = [note for note in user_notes if note.get('is_public', False)]\n                total_likes = sum(len(note.get('likes', [])) for note in public_notes_list)\n                stats = {'public_posts': len(public_notes_list), 'likes': total_likes}\n                return render_template('profile.html', user=user, stats=stats, public_notes=public_notes_list)\n            \n            file = request.files['profile_photo']\n            if file.filename == '':\n                flash('No file selected', 'error')\n                # Quick stats calculation for error return\n                notes = load_notes()\n                user_notes = notes.get(session['user_id'], [])\n                public_notes_list = [note for note in user_notes if note.get('is_public', False)]\n                total_likes = sum(len(note.get('likes', [])) for note in public_notes_list)\n                stats = {'public_posts': len(public_notes_list), 'likes': total_likes}\n                return render_template('profile.html', user=user, stats=stats, public_notes=public_notes_list)\n            \n            # Check file size (5MB limit)\n            file.seek(0, os.SEEK_END)\n            file_length = file.tell()\n            if file_length > 5 * 1024 * 1024:  # 5MB\n                flash('File size too large. Maximum 5MB allowed.', 'error')\n                # Quick stats calculation for error return\n                notes = load_notes()\n                user_notes = notes.get(session['user_id'], [])\n                public_notes_list = [note for note in user_notes if note.get('is_public', False)]\n                total_likes = sum(len(note.get('likes', [])) for note in public_notes_list)\n                stats = {'public_posts': len(public_notes_list), 'likes': total_likes}\n                return render_template('profile.html', user=user, stats=stats, public_notes=public_notes_list)\n            \n            file.seek(0)  # Reset file pointer\n            \n            # Check file type\n            allowed_extensions = {'png', 'jpg', 'jpeg', 'gif'}\n            filename = secure_filename(file.filename or '')\n            file_ext = filename.rsplit('.', 1)[1].lower() if '.' in filename else ''\n            \n            if file_ext not in allowed_extensions:\n                flash('Invalid file type. Please upload PNG, JPG, JPEG, or GIF.', 'error')\n                # Quick stats calculation for error return\n                notes = load_notes()\n                user_notes = notes.get(session['user_id'], [])\n                public_notes_list = [note for note in user_notes if note.get('is_public', False)]\n                total_likes = sum(len(note.get('likes', [])) for note in public_notes_list)\n                stats = {'public_posts': len(public_notes_list), 'likes': total_likes}\n                return render_template('profile.html', user=user, stats=stats, public_notes=public_notes_list)\n            \n            # Read and encode file as base64\n            file_data = file.read()\n            file_base64 = base64.b64encode(file_data).decode('utf-8')\n            \n            # Save to user profile\n            user['profile_photo'] = file_base64\n            user['profile_photo_type'] = file_ext\n            save_users(users)\n            flash('Profile photo updated successfully!', 'success')\n\n        elif action == 'remove_photo':\n            # Remove profile photo\n            if 'profile_photo' in user:\n                del user['profile_photo']\n            if 'profile_photo_type' in user:\n                del user['profile_photo_type']\n            save_users(users)\n            flash('Profile photo removed successfully!', 'success')\n\n        elif action == 'toggle_app_lock':\n            if user.get('app_lock_enabled', False):\n                # Disable app lock (keep PIN)\n                user['app_lock_enabled'] = False\n                flash('App lock dinonaktifkan', 'success')\n            else:\n                # Enable app lock (use existing PIN or create new one)\n                if user.get('app_lock_pin'):\n                    # Use existing PIN\n                    user['app_lock_enabled'] = True\n                    flash('App lock diaktifkan dengan PIN yang sudah ada', 'success')\n                else:\n                    # Need to create new PIN\n                    app_lock_pin = request.form.get('app_lock_pin', '')\n                    if len(app_lock_pin) != 4 or not app_lock_pin.isdigit():\n                        flash('PIN harus 4 digit angka', 'error')\n                        # Quick stats calculation for error return\n                        notes = load_notes()\n                        user_notes = notes.get(session['user_id'], [])\n                        public_notes_list = [note for note in user_notes if note.get('is_public', False)]\n                        total_likes = sum(len(note.get('likes', [])) for note in public_notes_list)\n                        stats = {'public_posts': len(public_notes_list), 'likes': total_likes}\n                        return render_template('profile.html', user=user, stats=stats, public_notes=public_notes_list)\n\n                    user['app_lock_enabled'] = True\n                    user['app_lock_pin'] = generate_password_hash(app_lock_pin)\n                    flash('App lock diaktifkan dengan PIN baru', 'success')\n\n            save_users(users)\n\n        elif action == 'edit_pin':\n            current_pin = request.form.get('current_pin', '')\n            new_pin = request.form.get('new_pin', '')\n            confirm_pin = request.form.get('confirm_pin', '')\n\n            # Validate current PIN\n            if not user.get('app_lock_pin') or not check_password_hash(user['app_lock_pin'], current_pin):\n                flash('PIN saat ini salah', 'error')\n                # Quick stats calculation for error return\n                notes = load_notes()\n                user_notes = notes.get(session['user_id'], [])\n                public_notes_list = [note for note in user_notes if note.get('is_public', False)]\n                total_likes = sum(len(note.get('likes', [])) for note in public_notes_list)\n                stats = {'public_posts': len(public_notes_list), 'likes': total_likes}\n                return render_template('profile.html', user=user, stats=stats, public_notes=public_notes_list)\n\n            # Validate new PIN\n            if len(new_pin) != 4 or not new_pin.isdigit():\n                flash('PIN baru harus 4 digit angka', 'error')\n                # Quick stats calculation for error return\n                notes = load_notes()\n                user_notes = notes.get(session['user_id'], [])\n                public_notes_list = [note for note in user_notes if note.get('is_public', False)]\n                total_likes = sum(len(note.get('likes', [])) for note in public_notes_list)\n                stats = {'public_posts': len(public_notes_list), 'likes': total_likes}\n                return render_template('profile.html', user=user, stats=stats, public_notes=public_notes_list)\n\n            if new_pin != confirm_pin:\n                flash('Konfirmasi PIN baru tidak cocok', 'error')\n                # Quick stats calculation for error return\n                notes = load_notes()\n                user_notes = notes.get(session['user_id'], [])\n                public_notes_list = [note for note in user_notes if note.get('is_public', False)]\n                total_likes = sum(len(note.get('likes', [])) for note in public_notes_list)\n                stats = {'public_posts': len(public_notes_list), 'likes': total_likes}\n                return render_template('profile.html', user=user, stats=stats, public_notes=public_notes_list)\n\n            # Update PIN\n            user['app_lock_pin'] = generate_password_hash(new_pin)\n            save_users(users)\n            flash('PIN berhasil diubah', 'success')\n\n    # Calculate user statistics\n    notes = load_notes()\n    user_notes = notes.get(session['user_id'], [])\n    \n    # Get only public notes and decrypt them\n    public_notes_list = []\n    for note in user_notes:\n        if note.get('is_public', False):\n            decrypted_note = note.copy()\n            if decrypted_note.get('encrypted'):\n                decrypted_note['content'] = caesar_cipher(decrypted_note['content'], 3, encrypt=False)\n            public_notes_list.append(decrypted_note)\n    \n    # Count total likes received from public posts\n    total_likes = sum(len(note.get('likes', [])) for note in public_notes_list)\n    \n    stats = {\n        'public_posts': len(public_notes_list),\n        'likes': total_likes\n    }\n    \n    return render_template('profile.html', user=user, stats=stats, public_notes=public_notes_list)\n\n@app.route('/view_note/<int:note_id>', methods=['GET', 'POST'])\ndef view_note(note_id):\n    \"\"\"View individual note with privacy lock enforcement\"\"\"\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n\n    # Check app lock\n    users = load_users()\n    user = users.get(session['user_id'])\n    if user and user.get('app_lock_enabled') and not session.get('app_unlocked'):\n        return redirect(url_for('app_lock'))\n\n    notes = load_notes()\n    user_notes = notes.get(session['user_id'], [])\n\n    # Find the specific note\n    note = None\n    for n in user_notes:\n        if n.get('id') == note_id:\n            note = n\n            break\n\n    if not note:\n        flash('Catatan tidak ditemukan', 'error')\n        return redirect(url_for('index'))\n\n    # If note is locked, check PIN\n    if note.get('is_locked') and request.method == 'POST':\n        entered_pin = request.form.get('note_pin', '')\n        \n        if note.get('note_pin'):\n            pin_valid = False\n            if note['note_pin'] == 'use_app_pin':\n                # Use app lock PIN\n                if user and user.get('app_lock_pin') and check_password_hash(user['app_lock_pin'], entered_pin):\n                    pin_valid = True\n                else:\n                    flash('PIN App Lock salah', 'error')\n            else:\n                # Use custom note PIN\n                if check_password_hash(note['note_pin'], entered_pin):\n                    pin_valid = True\n                else:\n                    flash('PIN catatan salah', 'error')\n            \n            # Only decrypt if PIN is valid\n            if pin_valid:\n                if note.get('encrypted'):\n                    note['content'] = caesar_cipher(note['content'], 3, encrypt=False)\n                return render_template('view_note.html', note=note)\n            else:\n                # PIN invalid, show modal again without decrypting content\n                requires_pin = bool(note.get('note_pin'))\n                pin_type = 'app' if note.get('note_pin') == 'use_app_pin' else 'custom'\n                return render_template('view_note.html', note=note, show_pin_modal=True, requires_pin=requires_pin, pin_type=pin_type)\n\n    # If note is locked and no POST request (first visit), show PIN modal\n    if note.get('is_locked') and request.method == 'GET':\n        requires_pin = bool(note.get('note_pin'))\n        pin_type = 'app' if note.get('note_pin') == 'use_app_pin' else 'custom'\n        # Don't decrypt content for PIN modal\n        return render_template('view_note.html', note=note, show_pin_modal=True, requires_pin=requires_pin, pin_type=pin_type)\n\n    # Note is unlocked, decrypt and show\n    if note.get('encrypted'):\n        note['content'] = caesar_cipher(note['content'], 3, encrypt=False)\n\n    return render_template('view_note.html', note=note)\n\n@app.route('/edit_note/<int:note_id>', methods=['GET', 'POST'])\ndef edit_note(note_id):\n    \"\"\"Edit existing note with PIN verification for locked notes\"\"\"\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n\n    # Check app lock\n    users = load_users()\n    user = users.get(session['user_id'])\n    if user and user.get('app_lock_enabled') and not session.get('app_unlocked'):\n        return redirect(url_for('app_lock'))\n\n    notes = load_notes()\n    user_notes = notes.get(session['user_id'], [])\n\n    # Find the specific note\n    note = None\n    note_index = None\n    for i, n in enumerate(user_notes):\n        if n.get('id') == note_id:\n            note = n\n            note_index = i\n            break\n\n    if not note:\n        flash('Catatan tidak ditemukan', 'error')\n        return redirect(url_for('index'))\n\n    # Check if note is locked and requires PIN verification\n    if note.get('is_locked') and not session.get(f'edit_note_unlocked_{note_id}'):\n        if request.method == 'POST':\n            action = request.form.get('action')\n\n            if action == 'verify_pin':\n                entered_pin = request.form.get('note_pin', '')\n\n                if note.get('note_pin'):\n                    if note['note_pin'] == 'use_app_pin':\n                        # Use app lock PIN\n                        if not user or not user.get('app_lock_pin') or not check_password_hash(user['app_lock_pin'], entered_pin):\n                            flash('PIN App Lock salah', 'error')\n                            return render_template('verify_edit_pin.html', note=note, pin_type='app')\n                    else:\n                        # Use custom note PIN\n                        if not check_password_hash(note['note_pin'], entered_pin):\n                            flash('PIN catatan salah', 'error')\n                            return render_template('verify_edit_pin.html', note=note, pin_type='custom')\n\n                    session[f'edit_note_unlocked_{note_id}'] = True\n                else:\n                    session[f'edit_note_unlocked_{note_id}'] = True\n            else:\n                return redirect(url_for('index'))\n        else:\n            # Determine PIN type\n            pin_type = 'app' if note.get('note_pin') == 'use_app_pin' else 'custom'\n            requires_pin = bool(note.get('note_pin'))\n            return render_template('verify_edit_pin.html', note=note, pin_type=pin_type, requires_pin=requires_pin)\n\n    # Handle form submission for editing\n    if request.method == 'POST' and request.form.get('action') == 'update':\n        title = request.form['title']\n        content = request.form['content']\n        is_locked = 'is_locked' in request.form\n\n        if not title or not content:\n            flash('Judul dan isi catatan harus diisi', 'error')\n            # Decrypt note content for display\n            if note.get('encrypted'):\n                note['content'] = caesar_cipher(note['content'], 3, encrypt=False)\n            return render_template('edit_note.html', note=note, user=user)\n\n        # Handle PIN for locked notes\n        note_pin = note.get('note_pin')  # Keep existing PIN by default\n        if is_locked:\n            pin_option = request.form.get('pin_option', 'keep_existing')\n\n            if pin_option == 'custom_pin':\n                new_pin = request.form.get('note_pin', '')\n                if len(new_pin) != 4 or not new_pin.isdigit():\n                    flash('PIN catatan harus 4 digit angka', 'error')\n                    if note.get('encrypted'):\n                        note['content'] = caesar_cipher(note['content'], 3, encrypt=False)\n                    return render_template('edit_note.html', note=note, user=user)\n                note_pin = generate_password_hash(new_pin)\n            elif pin_option == 'app_pin':\n                if not user or not user.get('app_lock_pin'):\n                    flash('Anda belum mengatur PIN App Lock. Silakan atur di Profile atau pilih PIN khusus.', 'error')\n                    if note.get('encrypted'):\n                        note['content'] = caesar_cipher(note['content'], 3, encrypt=False)\n                    return render_template('edit_note.html', note=note, user=user)\n                note_pin = 'use_app_pin'\n        else:\n            note_pin = None\n\n        # Encrypt content with Caesar cipher\n        encrypted_content = caesar_cipher(content, 3, encrypt=True)\n\n        # Update note\n        user_notes[note_index] = {\n            'id': note['id'],\n            'title': title,\n            'content': encrypted_content,\n            'encrypted': True,\n            'is_locked': is_locked,\n            'note_pin': note_pin,\n            'created_at': note['created_at'],\n            'updated_at': datetime.now().isoformat(),\n            'is_public': is_locked # Update public flag, assuming it should be tied to lock status or handled differently if independent\n        }\n\n        notes[session['user_id']] = user_notes\n        save_notes(notes)\n\n        # Clear edit unlock session\n        if f'edit_note_unlocked_{note_id}' in session:\n            del session[f'edit_note_unlocked_{note_id}']\n\n        flash('Catatan berhasil diperbarui!', 'success')\n        return redirect(url_for('index'))\n\n    # Decrypt note content for editing\n    if note.get('encrypted'):\n        note['content'] = caesar_cipher(note['content'], 3, encrypt=False)\n\n    return render_template('edit_note.html', note=note, user=user)\n\n@app.route('/delete_note/<int:note_id>', methods=['GET', 'POST'])\ndef delete_note(note_id):\n    \"\"\"Delete note with PIN verification for locked notes\"\"\"\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n\n    # Check app lock\n    users = load_users()\n    user = users.get(session['user_id'])\n    if user and user.get('app_lock_enabled') and not session.get('app_unlocked'):\n        return redirect(url_for('app_lock'))\n\n    notes = load_notes()\n    user_notes = notes.get(session['user_id'], [])\n\n    # Find the specific note\n    note = None\n    note_index = None\n    for i, n in enumerate(user_notes):\n        if n.get('id') == note_id:\n            note = n\n            note_index = i\n            break\n\n    if not note:\n        flash('Catatan tidak ditemukan', 'error')\n        return redirect(url_for('index'))\n\n    # Check if note is locked and requires PIN verification\n    if note.get('is_locked') and not session.get(f'delete_note_unlocked_{note_id}'):\n        if request.method == 'POST':\n            action = request.form.get('action')\n\n            if action == 'verify_pin':\n                entered_pin = request.form.get('note_pin', '')\n\n                if note.get('note_pin'):\n                    if note['note_pin'] == 'use_app_pin':\n                        # Use app lock PIN\n                        if not user or not user.get('app_lock_pin') or not check_password_hash(user['app_lock_pin'], entered_pin):\n                            flash('PIN App Lock salah', 'error')\n                            return render_template('verify_delete_pin.html', note=note, pin_type='app')\n                    else:\n                        # Use custom note PIN\n                        if not check_password_hash(note['note_pin'], entered_pin):\n                            flash('PIN catatan salah', 'error')\n                            return render_template('verify_delete_pin.html', note=note, pin_type='custom')\n\n                    session[f'delete_note_unlocked_{note_id}'] = True\n                else:\n                    session[f'delete_note_unlocked_{note_id}'] = True\n            else:\n                return redirect(url_for('index'))\n        else:\n            # Determine PIN type\n            pin_type = 'app' if note.get('note_pin') == 'use_app_pin' else 'custom'\n            requires_pin = bool(note.get('note_pin'))\n            return render_template('verify_delete_pin.html', note=note, pin_type=pin_type, requires_pin=requires_pin)\n\n    # Handle delete confirmation\n    if request.method == 'POST' and request.form.get('action') == 'confirm_delete':\n        # Delete the note\n        user_notes.pop(note_index)\n        notes[session['user_id']] = user_notes\n        save_notes(notes)\n\n        # Clear delete unlock session\n        if f'delete_note_unlocked_{note_id}' in session:\n            del session[f'delete_note_unlocked_{note_id}']\n\n        flash('Catatan berhasil dihapus!', 'success')\n        return redirect(url_for('index'))\n\n    return render_template('confirm_delete.html', note=note)\n\n@app.route('/my_notes')\ndef my_notes():\n    \"\"\"Display user's personal notes\"\"\"\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n\n    # Check app lock\n    users = load_users()\n    user = users.get(session['user_id'])\n    if user and user.get('app_lock_enabled') and not session.get('app_unlocked'):\n        return redirect(url_for('app_lock'))\n\n    notes = load_notes()\n    user_notes = notes.get(session['user_id'], [])\n\n    # Decrypt notes for display, but not locked ones\n    for note in user_notes:\n        if note.get('encrypted') and not note.get('is_locked'):\n            note['content'] = caesar_cipher(note['content'], 3, encrypt=False)\n        elif note.get('is_locked'):\n            # Keep locked notes encrypted, set placeholder\n            note['content_preview'] = 'Catatan ini terkunci. Klik untuk membuka.'\n\n    return render_template('my_notes.html', notes=user_notes, user=user)\n\n@app.route('/like_note/<int:note_id>/<author_id>', methods=['POST'])\ndef like_note(note_id, author_id):\n    \"\"\"Toggle like status for a note\"\"\"\n    if 'user_id' not in session:\n        return jsonify({'error': 'Unauthorized'}), 401\n\n    notes = load_notes()\n    if author_id not in notes:\n        return jsonify({'error': 'Note not found'}), 404\n\n    # Find the note\n    note = None\n    note_index = None\n    for i, n in enumerate(notes[author_id]):\n        if n.get('id') == note_id:\n            note = n\n            note_index = i\n            break\n\n    if not note:\n        return jsonify({'error': 'Note not found'}), 404\n\n    # Initialize likes if not exists\n    if 'likes' not in note:\n        note['likes'] = []\n\n    user_id = session['user_id']\n    \n    # Toggle like\n    if user_id in note['likes']:\n        note['likes'].remove(user_id)\n        liked = False\n    else:\n        note['likes'].append(user_id)\n        liked = True\n\n    # Update note in database\n    notes[author_id][note_index] = note\n    save_notes(notes)\n\n    return jsonify({\n        'liked': liked,\n        'like_count': len(note['likes'])\n    })\n\n@app.route('/app_lock', methods=['GET', 'POST'])\ndef app_lock():\n    \"\"\"App lock screen\"\"\"\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n\n    users = load_users()\n    user = users.get(session['user_id'])\n\n    if not user or not user.get('app_lock_enabled'):\n        return redirect(url_for('index'))\n\n    if request.method == 'POST' and user:\n        pin = request.form['pin']\n\n        if user.get('app_lock_pin') and check_password_hash(user['app_lock_pin'], pin):\n            session['app_unlocked'] = True\n            return redirect(url_for('index'))\n        else:\n            flash('PIN salah', 'error')\n\n    return render_template('app_lock.html')\n\n@app.route('/publish_notes', methods=['GET', 'POST'])\ndef publish_notes():\n    \"\"\"Show unpublished notes for publishing\"\"\"\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n\n    # Check app lock\n    users = load_users()\n    user = users.get(session['user_id'])\n    if user and user.get('app_lock_enabled') and not session.get('app_unlocked'):\n        return redirect(url_for('app_lock'))\n\n    notes = load_notes()\n    user_notes = notes.get(session['user_id'], [])\n\n    if request.method == 'POST':\n        selected_note_ids = request.form.getlist('selected_notes')\n        if selected_note_ids:\n            # Validate that selected notes are not locked\n            valid_ids = []\n            for i, note in enumerate(user_notes):\n                if str(note['id']) in selected_note_ids:\n                    if note.get('is_locked', False):\n                        flash(f'Catatan \"{note[\"title\"]}\" tidak dapat dipublikasikan karena masih terkunci', 'error')\n                    else:\n                        user_notes[i]['is_public'] = True\n                        valid_ids.append(str(note['id']))\n            \n            if valid_ids:\n                notes[session['user_id']] = user_notes\n                save_notes(notes)\n                flash(f'{len(valid_ids)} catatan berhasil dipublikasikan!', 'success')\n                return redirect(url_for('index'))\n        else:\n            flash('Pilih minimal satu catatan untuk dipublikasikan', 'error')\n\n    # Get unpublished notes (not public and not locked)\n    unpublished_notes = []\n    for note in user_notes:\n        if not note.get('is_public', False) and not note.get('is_locked', False):\n            # Decrypt content for display\n            decrypted_note = note.copy()\n            if decrypted_note.get('encrypted'):\n                decrypted_note['content'] = caesar_cipher(decrypted_note['content'], 3, encrypt=False)\n            unpublished_notes.append(decrypted_note)\n\n    return render_template('publish_notes.html', notes=unpublished_notes, user=user)\n\n@app.route('/get_profile_photo/<user_id>')\ndef get_profile_photo(user_id):\n    \"\"\"Serve user's profile photo\"\"\"\n    users = load_users()\n    user = users.get(user_id)\n    \n    if not user or 'profile_photo' not in user:\n        return '', 404\n    \n    try:\n        # Decode base64 image\n        image_data = base64.b64decode(user['profile_photo'])\n        file_type = user.get('profile_photo_type', 'jpg')\n        \n        # Set correct MIME type\n        mime_type = f'image/{file_type}'\n        if file_type == 'jpg':\n            mime_type = 'image/jpeg'\n        \n        return Response(image_data, mimetype=mime_type)\n    except:\n        return '', 404\n\n@app.route('/settings', methods=['GET', 'POST'])\ndef settings():\n    \"\"\"App settings page\"\"\"\n    if 'user_id' not in session:\n        return redirect(url_for('login'))\n\n    # Check app lock\n    users = load_users()\n    user = users.get(session['user_id'])\n    if user and user.get('app_lock_enabled') and not session.get('app_unlocked'):\n        return redirect(url_for('app_lock'))\n\n    if request.method == 'POST' and user:\n        action = request.form.get('action')\n\n        if action == 'toggle_app_lock':\n            if user.get('app_lock_enabled', False):\n                # Disable app lock (keep PIN)\n                user['app_lock_enabled'] = False\n                flash('App lock dinonaktifkan', 'success')\n            else:\n                # Enable app lock (use existing PIN or create new one)\n                if user.get('app_lock_pin'):\n                    # Use existing PIN\n                    user['app_lock_enabled'] = True\n                    flash('App lock diaktifkan dengan PIN yang sudah ada', 'success')\n                else:\n                    # Need to create new PIN\n                    app_lock_pin = request.form.get('app_lock_pin', '')\n                    if len(app_lock_pin) != 4 or not app_lock_pin.isdigit():\n                        flash('PIN harus 4 digit angka', 'error')\n                        return render_template('settings.html', user=user)\n\n                    user['app_lock_enabled'] = True\n                    user['app_lock_pin'] = generate_password_hash(app_lock_pin)\n                    flash('App lock diaktifkan dengan PIN baru', 'success')\n\n            save_users(users)\n\n        elif action == 'edit_pin':\n            current_pin = request.form.get('current_pin', '')\n            new_pin = request.form.get('new_pin', '')\n            confirm_pin = request.form.get('confirm_pin', '')\n\n            # Validate current PIN\n            if not user.get('app_lock_pin') or not check_password_hash(user['app_lock_pin'], current_pin):\n                flash('PIN saat ini salah', 'error')\n                return render_template('settings.html', user=user)\n\n            # Validate new PIN\n            if len(new_pin) != 4 or not new_pin.isdigit():\n                flash('PIN baru harus 4 digit angka', 'error')\n                return render_template('settings.html', user=user)\n\n            if new_pin != confirm_pin:\n                flash('Konfirmasi PIN baru tidak cocok', 'error')\n                return render_template('settings.html', user=user)\n\n            # Update PIN\n            user['app_lock_pin'] = generate_password_hash(new_pin)\n            save_users(users)\n            flash('PIN berhasil diubah', 'success')\n\n    return render_template('settings.html', user=user)\n\nif __name__ == '__main__':\n    init_database()\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":38745},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":98},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask>=3.1.2\",\n    \"gunicorn>=23.0.0\",\n    \"werkzeug>=3.1.3\",\n    \"psycopg2-binary>=2.9.10\",\n    \"email-validator>=2.3.0\",\n]\n","size_bytes":303},"replit.md":{"content":"# Catatan Harian - Personal Note-Taking Application\n\n## Overview\n\nCatatan Harian is a Flask-based personal note-taking application designed for Indonesian users. The application allows users to create, store, and manage their personal notes with privacy features including app lock functionality and individual note locking. The system emphasizes simplicity and security, providing a clean interface for personal journaling and note management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templates with Bootstrap 5.1.3 for responsive UI\n- **Styling Framework**: Bootstrap with custom CSS for enhanced visual appeal\n- **JavaScript**: Vanilla JavaScript for form interactions, password toggles, and UI enhancements\n- **Internationalization**: Indonesian language interface with localized text and date formatting\n\n### Backend Architecture\n- **Framework**: Flask web framework with session-based authentication\n- **Authentication**: Werkzeug password hashing with session management\n- **Security Features**: \n  - App-level PIN protection for additional security layer\n  - Individual note privacy locks with confirmation prompts\n  - Session-based user authentication\n- **Routing**: RESTful route structure for user management and note operations\n\n### Data Storage Solution\n- **Database Type**: JSON file-based storage system\n- **Files**:\n  - `data/users.json`: User account information and credentials\n  - `data/notes.json`: Note content, metadata, and privacy settings\n- **Data Models**:\n  - Users: ID, name, email, hashed password, creation timestamp, app lock PIN\n  - Notes: ID, title, content, creation timestamp, privacy lock status, user association\n\n### Authentication and Authorization\n- **User Authentication**: Email/password login with secure password hashing\n- **Session Management**: Flask sessions for maintaining user login state\n- **Multi-layer Security**: \n  - Primary login authentication\n  - Optional app-level PIN lock\n  - Individual note privacy protection\n- **Access Control**: User-scoped note access with privacy confirmation workflows\n\n### Application Features\n- **Note Management**: Create, view, and organize personal notes\n- **Privacy Controls**: Lock sensitive notes requiring explicit confirmation to view\n- **User Profiles**: Basic user information and account management\n- **Security Dashboard**: App lock configuration and security settings\n- **Responsive Design**: Mobile-friendly interface with Bootstrap components\n\n## External Dependencies\n\n### Frontend Libraries\n- **Bootstrap 5.1.3**: CSS framework for responsive design and UI components\n- **Font Awesome 6.0.0**: Icon library for enhanced visual interface\n- **CDN Delivery**: External CDN hosting for Bootstrap and Font Awesome assets\n\n### Backend Dependencies\n- **Flask**: Core web framework for Python\n- **Werkzeug**: Password hashing and security utilities\n- **Python Standard Library**: JSON handling, datetime operations, file I/O, and session management\n\n### Development Environment\n- **Session Management**: Environment variable configuration for session secrets\n- **File System**: Local file storage for JSON databases and static assets\n- **Static Assets**: CSS and JavaScript files served through Flask's static file handling","size_bytes":3339},"static/css/style.css":{"content":"\n/* Complete redesign based on Reflectly style */\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    background: linear-gradient(135deg, #1a0a1a 0%, #2a1a2a 50%, #1a0a1a 100%);\n    min-height: 100vh;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Inter', sans-serif;\n    color: #ffffff;\n    line-height: 1.6;\n}\n\n.container {\n    max-width: 100%;\n    margin: 0 auto;\n    padding: 0 30px;\n}\n\n/* Navigation */\n.navbar {\n    background: rgba(0, 0, 0, 0.3) !important;\n    backdrop-filter: blur(20px);\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n    padding: 1rem 0;\n}\n\n.navbar-brand {\n    font-weight: 700;\n    font-size: 1.5rem;\n    color: #fff !important;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.navbar-brand i {\n    color: #e91e63;\n    font-size: 1.8rem;\n}\n\n.navbar-nav .nav-link {\n    color: rgba(255, 255, 255, 0.8) !important;\n    font-weight: 500;\n    padding: 0.5rem 1rem !important;\n    border-radius: 20px;\n    transition: all 0.3s ease;\n    margin: 0 0.25rem;\n    font-size: 1.2rem;\n}\n\n.navbar-nav .nav-link:hover {\n    color: #fff !important;\n    background: rgba(233, 30, 99, 0.2);\n}\n\n.navbar-nav .nav-link.active {\n    color: #e91e63 !important;\n    background: rgba(233, 30, 99, 0.1);\n}\n\n/* Welcome Section */\n.welcome-section {\n    padding: 2rem 0;\n    margin-bottom: 2rem;\n}\n\n.welcome-title {\n    font-size: 2.5rem;\n    font-weight: 700;\n    color: #fff;\n    margin-bottom: 1rem;\n}\n\n.publish-note-btn {\n    background: #e91e63;\n    color: white;\n    border: none;\n    padding: 8px 16px;\n    border-radius: 20px;\n    font-weight: 600;\n    text-decoration: none;\n    display: inline-flex;\n    align-items: center;\n    gap: 0.4rem;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(233, 30, 99, 0.3);\n    font-size: 0.9rem;\n}\n\n.publish-note-btn:hover {\n    background: #c2185b;\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(233, 30, 99, 0.4);\n    color: white;\n}\n\n/* Note Cards */\n.note-feed {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n    gap: 1.5rem;\n    margin-bottom: 2rem;\n}\n\n.note-card {\n    background: rgba(255, 255, 255, 0.03);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 20px;\n    padding: 1.5rem;\n    transition: all 0.3s ease;\n    position: relative;\n}\n\n.note-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n    border-color: rgba(233, 30, 99, 0.3);\n}\n\n.note-header {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1rem;\n}\n\n.user-avatar {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background: #e91e63;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-weight: 600;\n    font-size: 1.1rem;\n    margin-right: 0.75rem;\n}\n\n.user-info h6 {\n    color: #fff;\n    font-weight: 600;\n    margin: 0;\n    font-size: 1rem;\n}\n\n.user-info small {\n    color: rgba(255, 255, 255, 0.6);\n    font-size: 0.85rem;\n}\n\n.note-actions {\n    margin-left: auto;\n}\n\n.btn-sm {\n    padding: 0.375rem 0.75rem;\n    font-size: 0.875rem;\n    border-radius: 15px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    background: rgba(255, 255, 255, 0.1);\n    color: rgba(255, 255, 255, 0.8);\n    transition: all 0.3s ease;\n}\n\n.btn-sm:hover {\n    background: rgba(255, 255, 255, 0.2);\n    color: #fff;\n    transform: translateY(-1px);\n}\n\n.btn-outline-danger:hover {\n    background: #dc3545;\n    border-color: #dc3545;\n    color: white;\n}\n\n.note-content h5 {\n    color: #fff;\n    font-weight: 600;\n    margin-bottom: 0.75rem;\n    font-size: 1.25rem;\n}\n\n.note-content p {\n    color: rgba(255, 255, 255, 0.8);\n    line-height: 1.6;\n    margin: 0;\n}\n\n.note-footer {\n    margin-top: 1.5rem;\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.like-btn {\n    background: none;\n    border: none;\n    color: rgba(255, 255, 255, 0.6);\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    font-size: 0.9rem;\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.like-btn:hover {\n    color: #e91e63;\n    transform: scale(1.05);\n}\n\n.like-btn.liked {\n    color: #e91e63;\n}\n\n.like-btn.liked i {\n    color: #e91e63;\n}\n\n/* Forms */\n.form-card {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 20px;\n    padding: 2rem;\n    margin: 2rem auto;\n    max-width: 600px;\n}\n\n.form-card h3 {\n    color: #fff;\n    font-weight: 700;\n    margin-bottom: 1.5rem;\n    text-align: center;\n}\n\n.form-control {\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 12px;\n    color: #fff;\n    padding: 0.75rem 1rem;\n    transition: all 0.3s ease;\n}\n\n.form-control:focus {\n    background: rgba(255, 255, 255, 0.15);\n    border-color: #e91e63;\n    color: #fff;\n    box-shadow: 0 0 0 0.2rem rgba(233, 30, 99, 0.25);\n}\n\n.form-control::placeholder {\n    color: rgba(255, 255, 255, 0.5);\n}\n\ntextarea.form-control {\n    min-height: 120px;\n    resize: vertical;\n}\n\n.form-label {\n    color: rgba(255, 255, 255, 0.9);\n    font-weight: 500;\n    margin-bottom: 0.5rem;\n}\n\n.btn {\n    border-radius: 12px;\n    font-weight: 600;\n    padding: 0.75rem 1.5rem;\n    transition: all 0.3s ease;\n    border: none;\n}\n\n.btn-primary {\n    background: #e91e63;\n    color: white;\n    box-shadow: 0 4px 15px rgba(233, 30, 99, 0.3);\n}\n\n.btn-primary:hover {\n    background: #c2185b;\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(233, 30, 99, 0.4);\n}\n\n.btn-secondary {\n    background: rgba(255, 255, 255, 0.1);\n    color: rgba(255, 255, 255, 0.8);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.btn-secondary:hover {\n    background: rgba(255, 255, 255, 0.2);\n    color: #fff;\n}\n\n.btn-danger {\n    background: #dc3545;\n    color: white;\n}\n\n.btn-danger:hover {\n    background: #c82333;\n    transform: translateY(-2px);\n}\n\n/* Empty State */\n.empty-state {\n    text-align: center;\n    padding: 4rem 2rem;\n    color: rgba(255, 255, 255, 0.6);\n}\n\n.empty-state i {\n    font-size: 4rem;\n    margin-bottom: 1.5rem;\n    color: rgba(233, 30, 99, 0.5);\n}\n\n.empty-state h3 {\n    color: #fff;\n    margin-bottom: 1rem;\n}\n\n/* Alerts */\n.alert {\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 12px;\n    color: #fff;\n    padding: 1rem;\n    margin-bottom: 1rem;\n}\n\n.alert-success {\n    background: rgba(40, 167, 69, 0.2);\n    border-color: rgba(40, 167, 69, 0.3);\n}\n\n.alert-danger {\n    background: rgba(220, 53, 69, 0.2);\n    border-color: rgba(220, 53, 69, 0.3);\n}\n\n/* Modals */\n.modal-content {\n    background: rgba(0, 0, 0, 0.9);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 20px;\n    color: #fff;\n}\n\n.modal-header {\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n    padding: 1.5rem;\n}\n\n.modal-body {\n    padding: 1.5rem;\n}\n\n.modal-footer {\n    border-top: 1px solid rgba(255, 255, 255, 0.1);\n    padding: 1.5rem;\n}\n\n/* Dropdown */\n.dropdown-menu {\n    background: rgba(0, 0, 0, 0.9);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    border-radius: 12px;\n}\n\n/* Navbar dropdown specific z-index */\n.navbar .dropdown-menu {\n    z-index: 1050 !important;\n}\n\n.dropdown-item {\n    color: rgba(255, 255, 255, 0.8);\n    transition: all 0.3s ease;\n}\n\n.dropdown-item:hover {\n    background: rgba(233, 30, 99, 0.2);\n    color: #fff;\n}\n\n.dropdown-divider {\n    border-color: rgba(255, 255, 255, 0.1);\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n    .note-feed {\n        grid-template-columns: 1fr;\n    }\n    \n    .welcome-title {\n        font-size: 2rem;\n    }\n    \n    .container {\n        padding: 0 15px;\n    }\n    \n    .form-card {\n        margin: 1rem;\n        padding: 1.5rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .note-card {\n        padding: 1rem;\n    }\n    \n    .welcome-section {\n        padding: 1rem 0;\n    }\n    \n    .publish-note-btn {\n        padding: 8px 16px;\n        font-size: 0.85rem;\n    }\n    \n    .container {\n        padding: 0 15px;\n    }\n}\n\n/* My Notes Page Specific Styling */\n.note-title {\n    font-size: 1.25rem;\n    font-weight: 600;\n    line-height: 1.3;\n    color: #fff;\n}\n\n.note-preview {\n    color: rgba(255, 255, 255, 0.7);\n    line-height: 1.5;\n    font-size: 0.9rem;\n}\n\n.note-footer {\n    margin-top: 1.5rem;\n}\n\n.note-actions .btn {\n    padding: 0.4rem 0.6rem;\n    border-radius: 8px;\n    font-size: 0.8rem;\n    transition: all 0.2s ease;\n}\n\n.note-actions .btn:hover {\n    transform: translateY(-1px);\n}\n\n.note-card {\n    background: rgba(255, 255, 255, 0.04);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.08);\n    border-radius: 16px;\n    padding: 1.5rem;\n    transition: all 0.3s ease;\n    display: flex;\n    flex-direction: column;\n    min-height: 200px;\n}\n\n.note-card:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);\n    border-color: rgba(233, 30, 99, 0.2);\n    background: rgba(255, 255, 255, 0.06);\n}\n\n/* Badge styling for My Notes */\n.badge {\n    font-size: 0.7rem;\n    padding: 0.25rem 0.5rem;\n    border-radius: 6px;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #e91e63;\n    border-radius: 10px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #c2185b;\n}\n\n/* Input group styling */\n.input-group-text {\n    background: rgba(255, 255, 255, 0.1);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    color: rgba(255, 255, 255, 0.8);\n}\n\n/* Form check styling */\n.form-check-input {\n    background-color: rgba(255, 255, 255, 0.1);\n    border-color: rgba(255, 255, 255, 0.3);\n}\n\n.form-check-input:checked {\n    background-color: #e91e63;\n    border-color: #e91e63;\n}\n\n.form-check-label {\n    color: rgba(255, 255, 255, 0.9);\n}\n\n/* Card styling for other pages */\n.card {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 20px;\n    color: #fff;\n}\n\n.card-header {\n    background: rgba(233, 30, 99, 0.2) !important;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 20px 20px 0 0 !important;\n    color: #fff !important;\n}\n\n.text-muted {\n    color: rgba(255, 255, 255, 0.6) !important;\n}\n\n.text-light {\n    color: #fff !important;\n}\n\n/* Clickable note title styling */\n.clickable-title:hover {\n    color: #e91e63 !important;\n    transition: color 0.3s ease;\n}\n\n.note-card a.text-decoration-none:hover .note-title {\n    color: #e91e63 !important;\n}\n\n.note-card a.text-decoration-none:hover .note-preview {\n    color: rgba(255, 255, 255, 0.9) !important;\n}\n\n/* Top action buttons styling */\n.note-actions-top .btn {\n    padding: 0.25rem 0.4rem;\n    font-size: 0.75rem;\n    border-radius: 6px;\n    opacity: 0.7;\n    transition: all 0.2s ease;\n}\n\n.note-actions-top .btn:hover {\n    opacity: 1;\n    transform: translateY(-1px);\n}\n\n.note-card:hover .note-actions-top .btn {\n    opacity: 0.9;\n}\n\n/* Publish Notes Page Styling */\n.publish-form-card {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 20px;\n    padding: 2rem;\n    margin-bottom: 2rem;\n}\n\n.note-selection-card {\n    background: rgba(255, 255, 255, 0.03);\n    border: 1px solid rgba(255, 255, 255, 0.08);\n    border-radius: 12px;\n    padding: 1rem;\n    transition: all 0.3s ease;\n    cursor: pointer;\n}\n\n.note-selection-card:hover {\n    background: rgba(255, 255, 255, 0.06);\n    border-color: rgba(233, 30, 99, 0.3);\n}\n\n.note-selection-card .form-check-input {\n    margin-top: 0.25rem;\n}\n\n.note-selection-card .form-check-input:checked {\n    background-color: #e91e63;\n    border-color: #e91e63;\n}\n\n.note-selection-content {\n    margin-left: 1.5rem;\n}\n\n.note-selection-card .note-title {\n    font-size: 1.1rem;\n    font-weight: 600;\n}\n\n.note-selection-card .note-preview {\n    line-height: 1.5;\n    font-size: 0.9rem;\n}\n\n.notes-selection {\n    max-height: 60vh;\n    overflow-y: auto;\n}\n\n/* Custom scrollbar for notes selection */\n.notes-selection::-webkit-scrollbar {\n    width: 6px;\n}\n\n.notes-selection::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 3px;\n}\n\n.notes-selection::-webkit-scrollbar-thumb {\n    background: #e91e63;\n    border-radius: 3px;\n}\n\n.notes-selection::-webkit-scrollbar-thumb:hover {\n    background: #c2185b;\n}\n\n/* Profile Page Styling */\n.profile-header-card {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 24px;\n    padding: 2.5rem;\n    margin-bottom: 2rem;\n    position: relative;\n}\n\n.profile-content {\n    display: flex;\n    align-items: flex-start;\n    gap: 2rem;\n}\n\n.profile-picture-container {\n    flex-shrink: 0;\n}\n\n.profile-picture {\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n    background: linear-gradient(135deg, #e91e63, #c2185b);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-size: 3rem;\n    font-weight: 700;\n    border: 4px solid rgba(255, 255, 255, 0.2);\n    box-shadow: 0 8px 32px rgba(233, 30, 99, 0.3);\n    position: relative;\n}\n\n/* Profile photo edit button */\n.profile-photo-edit-btn {\n    position: absolute;\n    bottom: 8px;\n    right: 8px;\n    width: 32px;\n    height: 32px;\n    background: #e91e63;\n    border: 3px solid rgba(255, 255, 255, 0.2);\n    border-radius: 50%;\n    color: white;\n    font-size: 14px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.profile-photo-edit-btn:hover {\n    background: #c2185b;\n    transform: scale(1.1);\n}\n\n.profile-info {\n    flex: 1;\n    min-width: 0;\n}\n\n.profile-name {\n    font-size: 2.2rem;\n    font-weight: 700;\n    color: #fff;\n    margin-bottom: 0.5rem;\n    line-height: 1.2;\n}\n\n.profile-bio {\n    color: rgba(255, 255, 255, 0.8);\n    font-size: 1rem;\n    line-height: 1.6;\n    margin-bottom: 2rem;\n    max-width: 500px;\n}\n\n.profile-stats {\n    display: flex;\n    gap: 3rem;\n    margin-bottom: 1.5rem;\n}\n\n.stat-item {\n    text-align: center;\n}\n\n.stat-number {\n    font-size: 2rem;\n    font-weight: 700;\n    color: #fff;\n    line-height: 1;\n    margin-bottom: 0.25rem;\n}\n\n.stat-label {\n    font-size: 0.9rem;\n    color: rgba(255, 255, 255, 0.7);\n    font-weight: 500;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.profile-posts-section {\n    background: rgba(255, 255, 255, 0.03);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.08);\n    border-radius: 20px;\n    padding: 2rem;\n}\n\n/* Avatar circle for posts */\n.avatar-circle {\n    width: 48px;\n    height: 48px;\n    border-radius: 50%;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-weight: 600;\n    font-size: 1.2rem;\n    overflow: hidden;\n    border: 2px solid rgba(255, 255, 255, 0.1);\n}\n\n.section-title {\n    color: #fff;\n    font-size: 1.5rem;\n    font-weight: 600;\n    margin-bottom: 1.5rem;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.posts-preview {\n    padding: 2rem;\n    text-align: center;\n}\n\n.posts-preview a {\n    color: #e91e63;\n    font-weight: 500;\n}\n\n.posts-preview a:hover {\n    color: #c2185b;\n}\n\n.empty-posts-state {\n    text-align: center;\n    padding: 3rem 2rem;\n}\n\n.empty-posts-state i {\n    color: rgba(233, 30, 99, 0.5);\n}\n\n/* Responsive profile design */\n@media (max-width: 768px) {\n    .profile-content {\n        flex-direction: column;\n        text-align: center;\n        gap: 1.5rem;\n    }\n    \n    .profile-picture {\n        width: 100px;\n        height: 100px;\n        font-size: 2.5rem;\n        margin: 0 auto;\n    }\n    \n    .profile-name {\n        font-size: 1.8rem;\n    }\n    \n    .profile-stats {\n        justify-content: center;\n        gap: 2rem;\n    }\n    \n    .profile-header-card {\n        padding: 2rem 1.5rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .profile-picture {\n        width: 80px;\n        height: 80px;\n        font-size: 2rem;\n    }\n    \n    .profile-name {\n        font-size: 1.5rem;\n    }\n    \n    .stat-number {\n        font-size: 1.5rem;\n    }\n    \n    .profile-stats {\n        gap: 1.5rem;\n    }\n}\n\n/* Settings Page Styling */\n.settings-card {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: 20px;\n    overflow: hidden;\n}\n\n.settings-card-header {\n    background: rgba(255, 255, 255, 0.08);\n    padding: 1.5rem 2rem;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.settings-card-header h4 {\n    color: #fff;\n    font-weight: 600;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.settings-card-body {\n    padding: 2rem;\n}\n\n.setting-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1.5rem 0;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.08);\n}\n\n.setting-item:last-child {\n    border-bottom: none;\n}\n\n.setting-info {\n    flex: 1;\n}\n\n.setting-title {\n    color: #fff;\n    font-size: 1.1rem;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n    display: flex;\n    align-items: center;\n}\n\n.setting-description {\n    color: rgba(255, 255, 255, 0.7);\n    font-size: 0.9rem;\n    line-height: 1.4;\n    margin-bottom: 0.5rem;\n}\n\n.setting-status {\n    font-size: 0.85rem;\n    font-weight: 500;\n}\n\n.status-active {\n    color: #28a745;\n}\n\n.status-inactive {\n    color: #dc3545;\n}\n\n.setting-actions {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.setting-actions .btn {\n    font-size: 0.85rem;\n    padding: 0.5rem 1rem;\n    border-radius: 8px;\n    font-weight: 500;\n}\n\n/* Modal styling for settings */\n.modal-content.bg-dark {\n    background: rgba(0, 0, 0, 0.95) !important;\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.modal-header.border-secondary {\n    border-bottom-color: rgba(255, 255, 255, 0.2) !important;\n}\n\n.modal-footer.border-secondary {\n    border-top-color: rgba(255, 255, 255, 0.2) !important;\n}\n\n/* Public post cards */\n.public-post-card {\n    background: rgba(255, 255, 255, 0.04);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.08);\n    border-radius: 16px;\n    padding: 1.5rem;\n    transition: all 0.3s ease;\n    height: 100%;\n    min-height: 180px;\n}\n\n.public-post-card:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);\n    border-color: rgba(233, 30, 99, 0.2);\n    background: rgba(255, 255, 255, 0.06);\n}\n\n.post-preview-content {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.post-preview-title {\n    color: #fff;\n    font-weight: 600;\n    margin-bottom: 0.75rem;\n    font-size: 1.1rem;\n    line-height: 1.3;\n}\n\n.post-preview-text {\n    color: rgba(255, 255, 255, 0.7);\n    line-height: 1.5;\n    font-size: 0.9rem;\n    flex: 1;\n    margin-bottom: 1rem;\n}\n\n.post-preview-meta {\n    margin-top: auto;\n    padding-top: 1rem;\n    border-top: 1px solid rgba(255, 255, 255, 0.08);\n}\n\n.public-post-card a:hover .post-preview-title {\n    color: #e91e63 !important;\n}\n\n.public-post-card a:hover .post-preview-text {\n    color: rgba(255, 255, 255, 0.9) !important;\n}\n\n/* Profile image styling */\n.profile-image {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    border-radius: 50%;\n}\n\n/* Dynamic profile picture colors */\n.profile-picture.color-blue {\n    background: linear-gradient(135deg, #2196f3, #1976d2);\n}\n\n.profile-picture.color-green {\n    background: linear-gradient(135deg, #4caf50, #388e3c);\n}\n\n.profile-picture.color-orange {\n    background: linear-gradient(135deg, #ff9800, #f57c00);\n}\n\n.profile-picture.color-purple {\n    background: linear-gradient(135deg, #9c27b0, #7b1fa2);\n}\n\n.profile-picture.color-red {\n    background: linear-gradient(135deg, #f44336, #d32f2f);\n}\n\n.profile-picture.color-grey {\n    background: linear-gradient(135deg, #607d8b, #455a64);\n}\n\n/* Responsive settings */\n@media (max-width: 768px) {\n    .setting-item {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 1rem;\n    }\n    \n    .setting-actions {\n        width: 100%;\n        justify-content: flex-end;\n    }\n    \n    .settings-card-header,\n    .settings-card-body {\n        padding: 1.5rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .setting-actions {\n        flex-direction: column;\n        width: 100%;\n    }\n    \n    .setting-actions .btn {\n        width: 100%;\n    }\n}\n","size_bytes":20769},"static/js/script.js":{"content":"// JavaScript untuk Catatan Harian\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Password toggle functionality\n    setupPasswordToggle();\n    \n    // Form validation\n    setupFormValidation();\n    \n    // Password strength checker\n    setupPasswordStrength();\n    \n    // Auto-save functionality for notes (optional)\n    setupAutoSave();\n    \n    // Initialize tooltips and popovers\n    initializeBootstrapComponents();\n    \n    // Setup note PIN options toggle\n    setupNotePinToggle();\n});\n\nfunction setupPasswordToggle() {\n    const toggleButtons = document.querySelectorAll('#togglePassword, #toggleConfirmPassword');\n    \n    toggleButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const targetId = this.id === 'togglePassword' ? 'password' : 'confirm_password';\n            const passwordField = document.getElementById(targetId);\n            const icon = this.querySelector('i');\n            \n            if (passwordField.type === 'password') {\n                passwordField.type = 'text';\n                icon.classList.remove('fa-eye');\n                icon.classList.add('fa-eye-slash');\n            } else {\n                passwordField.type = 'password';\n                icon.classList.remove('fa-eye-slash');\n                icon.classList.add('fa-eye');\n            }\n        });\n    });\n}\n\nfunction setupFormValidation() {\n    // Login form validation\n    const loginForm = document.getElementById('loginForm');\n    if (loginForm) {\n        loginForm.addEventListener('submit', function(e) {\n            const email = document.getElementById('email').value;\n            const password = document.getElementById('password').value;\n            \n            if (!email || !password) {\n                e.preventDefault();\n                showAlert('Semua field harus diisi!', 'error');\n                return false;\n            }\n            \n            if (!isValidEmail(email)) {\n                e.preventDefault();\n                showAlert('Format email tidak valid!', 'error');\n                return false;\n            }\n        });\n    }\n    \n    // Register form validation\n    const registerForm = document.getElementById('registerForm');\n    if (registerForm) {\n        registerForm.addEventListener('submit', function(e) {\n            const name = document.getElementById('name').value;\n            const email = document.getElementById('email').value;\n            const password = document.getElementById('password').value;\n            const confirmPassword = document.getElementById('confirm_password').value;\n            \n            if (!name || !email || !password || !confirmPassword) {\n                e.preventDefault();\n                showAlert('Semua field harus diisi!', 'error');\n                return false;\n            }\n            \n            if (!isValidEmail(email)) {\n                e.preventDefault();\n                showAlert('Format email tidak valid!', 'error');\n                return false;\n            }\n            \n            if (password !== confirmPassword) {\n                e.preventDefault();\n                showAlert('Password dan konfirmasi password tidak cocok!', 'error');\n                return false;\n            }\n            \n            if (!isStrongPassword(password)) {\n                e.preventDefault();\n                showAlert('Password tidak memenuhi syarat keamanan!', 'error');\n                return false;\n            }\n        });\n    }\n    \n    // Note form validation\n    const noteForm = document.getElementById('noteForm');\n    if (noteForm) {\n        noteForm.addEventListener('submit', function(e) {\n            const title = document.getElementById('title').value.trim();\n            const content = document.getElementById('content').value.trim();\n            \n            if (!title || !content) {\n                e.preventDefault();\n                showAlert('Judul dan isi catatan harus diisi!', 'error');\n                return false;\n            }\n            \n            if (title.length > 100) {\n                e.preventDefault();\n                showAlert('Judul terlalu panjang (maksimal 100 karakter)!', 'error');\n                return false;\n            }\n        });\n    }\n    \n    // App lock PIN validation\n    const appLockForm = document.getElementById('appLockForm');\n    if (appLockForm) {\n        const pinInput = document.getElementById('pin');\n        \n        // Only allow numbers\n        pinInput.addEventListener('input', function() {\n            this.value = this.value.replace(/[^0-9]/g, '');\n            \n            // Auto-submit when 4 digits are entered\n            if (this.value.length === 4) {\n                appLockForm.submit();\n            }\n        });\n        \n        pinInput.addEventListener('keypress', function(e) {\n            // Only allow numbers\n            if (!/[0-9]/.test(e.key) && !['Backspace', 'Delete', 'Tab'].includes(e.key)) {\n                e.preventDefault();\n            }\n        });\n    }\n    \n    // App lock setup PIN validation\n    const appLockPinInput = document.getElementById('app_lock_pin');\n    if (appLockPinInput) {\n        appLockPinInput.addEventListener('input', function() {\n            this.value = this.value.replace(/[^0-9]/g, '');\n        });\n        \n        appLockPinInput.addEventListener('keypress', function(e) {\n            if (!/[0-9]/.test(e.key) && !['Backspace', 'Delete', 'Tab'].includes(e.key)) {\n                e.preventDefault();\n            }\n        });\n    }\n}\n\nfunction setupPasswordStrength() {\n    const passwordInput = document.getElementById('password');\n    if (passwordInput && passwordInput.closest('#registerForm')) {\n        const strengthIndicator = document.createElement('div');\n        strengthIndicator.className = 'password-strength';\n        \n        // Find the password field container (mb-3 div) and append after input-group\n        const passwordContainer = passwordInput.closest('.mb-3');\n        const inputGroup = passwordInput.closest('.input-group');\n        \n        if (passwordContainer && inputGroup) {\n            // Insert the strength indicator after the input-group but before form-text\n            const formText = passwordContainer.querySelector('.form-text');\n            if (formText) {\n                passwordContainer.insertBefore(strengthIndicator, formText);\n            } else {\n                passwordContainer.appendChild(strengthIndicator);\n            }\n        }\n        \n        passwordInput.addEventListener('input', function() {\n            const strength = calculatePasswordStrength(this.value);\n            updateStrengthIndicator(strengthIndicator, strength);\n        });\n    }\n}\n\nfunction calculatePasswordStrength(password) {\n    let score = 0;\n    \n    if (password.length >= 8) score += 1;\n    if (password.length >= 12) score += 1;\n    if (/[a-z]/.test(password)) score += 1;\n    if (/[A-Z]/.test(password)) score += 1;\n    if (/[0-9]/.test(password)) score += 1;\n    if (/[^A-Za-z0-9]/.test(password)) score += 1;\n    \n    if (score < 3) return 'weak';\n    if (score < 5) return 'medium';\n    return 'strong';\n}\n\nfunction updateStrengthIndicator(indicator, strength) {\n    indicator.className = 'password-strength';\n    indicator.classList.add(`strength-${strength}`);\n    \n    const width = strength === 'weak' ? '33%' : strength === 'medium' ? '66%' : '100%';\n    indicator.style.width = width;\n}\n\nfunction setupAutoSave() {\n    const noteContent = document.getElementById('content');\n    if (noteContent) {\n        let autoSaveTimeout;\n        \n        noteContent.addEventListener('input', function() {\n            clearTimeout(autoSaveTimeout);\n            autoSaveTimeout = setTimeout(() => {\n                // Optional: Implement auto-save to localStorage\n                const title = document.getElementById('title').value;\n                const content = this.value;\n                \n                if (title || content) {\n                    localStorage.setItem('draft_note', JSON.stringify({\n                        title: title,\n                        content: content,\n                        timestamp: new Date().toISOString()\n                    }));\n                }\n            }, 1000);\n        });\n        \n        // Load draft on page load\n        const draft = localStorage.getItem('draft_note');\n        if (draft) {\n            try {\n                const parsed = JSON.parse(draft);\n                const titleInput = document.getElementById('title');\n                \n                if (!titleInput.value && !noteContent.value) {\n                    if (confirm('Ada draft catatan yang belum disimpan. Apakah ingin melanjutkan?')) {\n                        titleInput.value = parsed.title || '';\n                        noteContent.value = parsed.content || '';\n                    }\n                }\n            } catch (e) {\n                console.error('Error loading draft:', e);\n            }\n        }\n    }\n}\n\nfunction initializeBootstrapComponents() {\n    // Initialize tooltips\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n    \n    // Initialize popovers\n    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n    popoverTriggerList.map(function (popoverTriggerEl) {\n        return new bootstrap.Popover(popoverTriggerEl);\n    });\n}\n\n// Utility functions\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nfunction isStrongPassword(password) {\n    return password.length >= 8 &&\n           /[a-z]/.test(password) &&\n           /[A-Z]/.test(password) &&\n           /[0-9]/.test(password) &&\n           /[^A-Za-z0-9]/.test(password);\n}\n\nfunction showAlert(message, type = 'info') {\n    // Create alert element\n    const alertDiv = document.createElement('div');\n    alertDiv.className = `alert alert-${type === 'error' ? 'danger' : 'success'} alert-dismissible fade show`;\n    alertDiv.innerHTML = `\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    // Insert at the top of the container\n    const container = document.querySelector('.container');\n    if (container) {\n        container.insertBefore(alertDiv, container.firstChild);\n        \n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            if (alertDiv.parentNode) {\n                alertDiv.remove();\n            }\n        }, 5000);\n    }\n}\n\n// Clear draft when note is successfully saved\nwindow.addEventListener('beforeunload', function() {\n    // Clear draft if we're leaving the note page after successful save\n    if (window.location.pathname !== '/note') {\n        localStorage.removeItem('draft_note');\n    }\n});\n\n// Format date display (if moment.js alternative is needed)\nfunction formatDate(dateString) {\n    if (!dateString) return 'Tanggal tidak tersedia';\n    \n    const date = new Date(dateString);\n    const options = {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n    };\n    \n    return date.toLocaleDateString('id-ID', options);\n}\n\nfunction setupNotePinToggle() {\n    const isLockedCheckbox = document.getElementById('is_locked');\n    const isPublicCheckbox = document.getElementById('is_public');\n    const pinOptions = document.getElementById('pinOptions');\n    const useCustomPinRadio = document.getElementById('use_custom_pin');\n    const customPinInput = document.getElementById('customPinInput');\n    const notePinField = document.getElementById('note_pin');\n    \n    // Handle mutual exclusivity between public and locked\n    if (isLockedCheckbox && isPublicCheckbox) {\n        isLockedCheckbox.addEventListener('change', function() {\n            if (this.checked) {\n                isPublicCheckbox.checked = false;\n                if (pinOptions) pinOptions.style.display = 'block';\n            } else {\n                if (pinOptions) {\n                    pinOptions.style.display = 'none';\n                    if (customPinInput) customPinInput.style.display = 'none';\n                    if (notePinField) notePinField.required = false;\n                }\n            }\n        });\n        \n        isPublicCheckbox.addEventListener('change', function() {\n            if (this.checked) {\n                isLockedCheckbox.checked = false;\n                if (pinOptions) {\n                    pinOptions.style.display = 'none';\n                    if (customPinInput) customPinInput.style.display = 'none';\n                    if (notePinField) notePinField.required = false;\n                }\n            }\n        });\n    }\n    \n    if (isLockedCheckbox && pinOptions) {\n        // Toggle PIN options when lock checkbox is changed\n        isLockedCheckbox.addEventListener('change', function() {\n            if (this.checked) {\n                pinOptions.style.display = 'block';\n            } else {\n                pinOptions.style.display = 'none';\n                if (customPinInput) customPinInput.style.display = 'none';\n                if (notePinField) notePinField.required = false;\n            }\n        });\n    }\n    \n    if (useCustomPinRadio && customPinInput && notePinField) {\n        // Toggle custom PIN input when radio is changed\n        const pinOptionRadios = document.querySelectorAll('input[name=\"pin_option\"]');\n        pinOptionRadios.forEach(radio => {\n            radio.addEventListener('change', function() {\n                if (this.value === 'custom_pin') {\n                    customPinInput.style.display = 'block';\n                    notePinField.required = true;\n                } else {\n                    customPinInput.style.display = 'none';\n                    notePinField.required = false;\n                }\n            });\n        });\n        \n        // Validate PIN input (numbers only)\n        notePinField.addEventListener('input', function() {\n            this.value = this.value.replace(/[^0-9]/g, '');\n        });\n        \n        notePinField.addEventListener('keypress', function(e) {\n            if (!/[0-9]/.test(e.key) && !['Backspace', 'Delete', 'Tab'].includes(e.key)) {\n                e.preventDefault();\n            }\n        });\n    }\n}\n\n// Update all date displays on page load\ndocument.addEventListener('DOMContentLoaded', function() {\n    const dateElements = document.querySelectorAll('[data-date]');\n    dateElements.forEach(element => {\n        const dateString = element.getAttribute('data-date');\n        element.textContent = formatDate(dateString);\n    });\n});","size_bytes":14758}},"version":1}